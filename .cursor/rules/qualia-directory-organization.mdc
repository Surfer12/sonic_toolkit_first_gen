---
globs: Corpus/qualia/**/*
description: "Standards for qualia directory organization and component placement"
---

# Qualia Directory Organization Standards

## 📁 **Core Directory Structure**

### **Required Directory Layout**
```
Corpus/qualia/
├── *.java                    # Core Java security components
├── *.py                      # Python visualization and utilities
├── build.sh                  # Build automation script
├── docker-compose.yml        # Multi-container orchestration
├── Dockerfile               # Container definition
├── README.md                # Main documentation
├── .devcontainer/           # Development environment
│   ├── devcontainer.json    # VS Code configuration
│   ├── README.md           # Dev container documentation
│   └── security-dashboard.css  # UI styling
└── reports/                 # Generated analysis reports
    ├── comprehensive_security_report.txt
    ├── performance_report.txt
    └── validation_report.txt
```

## 🏗️ **Component Organization Standards**

### **Java Components (Core Security Framework)**
**Location**: Root directory (`Corpus/qualia/*.java`)
**Required Components**:
- `JavaPenetrationTesting.java` - Main security testing engine
- `ReverseKoopmanOperator.java` - Mathematical analysis framework
- `IntegratedSecurityDemo.java` - Demonstration and integration
- `BlueTeamDefenseFramework.java` - Defense strategy implementation
- `SecurityDashboard.java` - GUI security interface
- `ComplexNumber.java` - Mathematical utilities
- `KoopmanVisualization.java` - Visualization components

**Naming Convention**: `PascalCase.java` with descriptive names
**Package Declaration**: All files must use `package qualia;`

### **Python Components (Visualization & Utilities)**
**Location**: Root directory (`Corpus/qualia/*.py`)
**Required Components**:
- `demo_visualizations.py` - Data visualization demonstrations

**Naming Convention**: `snake_case.py` with clear purpose indication
**Import Structure**: Standard library first, then third-party, then local

### **Configuration Components (Infrastructure)**
**Location**: Root directory (`Corpus/qualia/`)
**Required Components**:
- `build.sh` - Build and deployment automation
- `docker-compose.yml` - Multi-service orchestration
- `Dockerfile` - Container build definition

**Permissions**: Executable permissions for scripts
**Environment Variables**: Use for sensitive configuration

### **Development Environment (Dev Containers)**
**Location**: `.devcontainer/` subdirectory
**Required Components**:
- `devcontainer.json` - VS Code development configuration
- `README.md` - Development environment documentation
- `security-dashboard.css` - UI styling and themes

**VS Code Extensions**: Include security and Java development extensions
**Mount Points**: Proper source code and workspace mounting

### **Documentation Components**
**Location**: Root directory (`Corpus/qualia/`)
**Required Components**:
- `README.md` - Main project documentation
- `README_BlueTeamDefenseStrategy.md` - Defense strategy guide
- `README_ReverseKoopmanPenetrationTesting.md` - Technical implementation
- `README_Visualizations.md` - Visualization guide

**Structure**: Standard sections (Overview, Installation, Usage, API)
**Cross-References**: Link to related components and external resources

### **Report Components (Generated Outputs)**
**Location**: `reports/` subdirectory
**Generated Components**:
- `comprehensive_security_report.txt` - Full security analysis
- `performance_report.txt` - Performance metrics and benchmarks
- `validation_report.txt` - Validation results and quality metrics

**Naming Convention**: `descriptive_name_report.txt`
**Content Standards**: Structured format with timestamps and metadata

## 🔧 **File Organization Rules**

### **Import and Dependency Management**
```java
// ✅ CORRECT: Organized imports
package qualia;

import java.util.*;
import java.security.*;
import qualia.security.*;

// Implementation...
```

```python
# ✅ CORRECT: Organized imports
import sys
import os
from pathlib import Path
import matplotlib.pyplot as plt
import numpy as np

# Local imports
from qualia.utils import *
```

### **File Size and Complexity Limits**
- **Java Files**: Maximum 1000 lines per file
- **Python Files**: Maximum 800 lines per file
- **Configuration Files**: Keep concise and focused
- **Documentation Files**: Comprehensive but organized with sections

### **File Encoding and Line Endings**
- **Encoding**: UTF-8 for all text files
- **Line Endings**: Unix (LF) for cross-platform compatibility
- **No BOM**: Byte Order Mark not allowed
- **Consistent Indentation**: 4 spaces for Python, consistent for others

## 📋 **Component Integration Standards**

### **Cross-Component Dependencies**
```java
// Java components should reference each other through clean interfaces
public class JavaPenetrationTesting {
    private final ReverseKoopmanOperator mathEngine;
    private final SecurityDashboard dashboard;

    public JavaPenetrationTesting() {
        this.mathEngine = new ReverseKoopmanOperator();
        this.dashboard = new SecurityDashboard();
    }
}
```

### **Python-Java Integration**
```python
# Python components should provide clean wrappers
import subprocess
import json

def run_java_security_analysis(config_path: str) -> dict:
    """Wrapper for Java security analysis."""
    result = subprocess.run([
        'java', '-cp', 'qualia.jar',
        'qualia.JavaPenetrationTesting',
        config_path
    ], capture_output=True, text=True)

    return json.loads(result.stdout)
```

### **Configuration Integration**
```yaml
# docker-compose.yml should orchestrate all components
version: '3.8'
services:
  qualia-security:
    build: .
    volumes:
      - ./reports:/app/reports
    environment:
      - JAVA_OPTS=-Xmx2g
    depends_on:
      - qualia-database

  qualia-visualization:
    image: python:3.9
    volumes:
      - .:/app
    command: python demo_visualizations.py
```

## 🎯 **Quality Assurance Standards**

### **Directory Structure Validation**
```python
# Automated validation script
def validate_qualia_structure(qualia_path: Path) -> dict:
    """Validate qualia directory structure compliance."""
    required_files = [
        'JavaPenetrationTesting.java',
        'ReverseKoopmanOperator.java',
        'build.sh',
        'docker-compose.yml',
        'Dockerfile',
        'README.md'
    ]

    missing_files = []
    for file in required_files:
        if not (qualia_path / file).exists():
            missing_files.append(file)

    return {
        'structure_valid': len(missing_files) == 0,
        'missing_files': missing_files,
        'total_files': len(list(qualia_path.glob('*'))),
        'directory_count': len([d for d in qualia_path.glob('*') if d.is_dir()])
    }
```

### **Component Completeness Checks**
- [ ] All required Java components present and compilable
- [ ] Python components have proper dependencies
- [ ] Configuration files are valid and executable
- [ ] Documentation covers all major components
- [ ] Report directory exists and is writable

### **Integration Testing Validation**
- [ ] Java components can import each other correctly
- [ ] Python components can execute Java components
- [ ] Docker containers build and run successfully
- [ ] Development environment works in VS Code
- [ ] All documentation links are valid

## 🔄 **Maintenance and Updates**

### **Regular Structure Audits**
- **Weekly**: Quick file existence and basic structure checks
- **Monthly**: Comprehensive organization and naming convention audits
- **Quarterly**: Complete restructure reviews and modernization updates

### **Component Lifecycle Management**
```python
# Component registration and tracking
COMPONENT_REGISTRY = {
    'java_core': [
        'JavaPenetrationTesting.java',
        'ReverseKoopmanOperator.java',
        'ComplexNumber.java'
    ],
    'java_ui': [
        'SecurityDashboard.java',
        'KoopmanVisualization.java'
    ],
    'python_utils': [
        'demo_visualizations.py'
    ],
    'infrastructure': [
        'build.sh',
        'docker-compose.yml',
        'Dockerfile'
    ]
}
```

### **Deprecation and Migration**
- [ ] Mark deprecated components with clear warnings
- [ ] Provide migration guides for major restructuring
- [ ] Maintain backward compatibility during transitions
- [ ] Update all documentation and references

## 📚 **Integration with Development Workflow**

### **IDE Configuration**
```json
// .devcontainer/devcontainer.json
{
    "name": "Qualia Development",
    "dockerFile": "../Dockerfile",
    "extensions": [
        "ms-vscode.vscode-java-pack",
        "ms-python.python",
        "ms-vscode.vscode-json",
        "ms-vscode.vscode-docker"
    ],
    "mounts": [
        "source=${localWorkspaceFolder},target=/workspaces/qualia,type=bind"
    ]
}
```

### **Build and Test Integration**
```bash
# build.sh should handle all components
#!/bin/bash
set -e

echo "Building Qualia components..."

# Build Java components
echo "Compiling Java sources..."
javac -cp ".:lib/*" qualia/*.java

# Package Java application
echo "Creating JAR file..."
jar cfm qualia.jar manifest.txt qualia/*.class

# Validate Python components
echo "Validating Python components..."
python -m py_compile demo_visualizations.py

echo "Build completed successfully!"
```

---

## 📖 **Related Standards**

### **Complementary Rules**
- [Qualia Integration Pipeline Standards](mdc:.cursor/rules/qualia-integration-pipeline-standards.mdc)
- [Integration Testing Standards](mdc:.cursor/rules/integration-testing-standards.mdc)
- [Security Assessment Workflows](mdc:.cursor/rules/security-assessment-workflows.mdc)

### **Supporting Documentation**
- [README.md](mdc:Corpus/qualia/README.md) - Main qualia documentation
- [docs/qualia_integration_guide.md](mdc:docs/qualia_integration_guide.md) - Integration guide
- [scripts/validate_qualia_structure.py](mdc:scripts/validate_qualia_structure.py) - Structure validation

---

**🎯 Maintain this directory structure to ensure consistent organization and reliable integration across all qualia components!**