---
globs: *.py,*.java,*.swift,*.json,*.tex
description: "Scientific computing frameworks, algorithms, and mathematical implementations for research-grade computing"
---

# 🔬 Scientific Computing Frameworks

This rule establishes the scientific computing frameworks, algorithms, and mathematical implementations that form the foundation of the research-grade scientific computing toolkit.

## 🎯 **Core Framework Architecture**

### **Framework Categories**
```python
FRAMEWORK_CATEGORIES = {
    "mathematical_foundations": {
        "description": "Core mathematical theories and foundations",
        "examples": ["Ψ(x) consciousness quantification", "HB rheology", "inverse precision"],
        "validation_criteria": ["mathematical_rigor", "convergence_analysis", "error_bounds"]
    },
    "scientific_algorithms": {
        "description": "Research-grade scientific algorithms",
        "examples": ["Levenberg-Marquardt optimization", "Koopman operators", "bootstrap uncertainty"],
        "validation_criteria": ["numerical_accuracy", "convergence_guarantees", "performance_characterization"]
    },
    "data_processing": {
        "description": "Data ingestion, processing, and analysis",
        "examples": ["experimental data validation", "cross-dataset integration", "statistical analysis"],
        "validation_criteria": ["data_integrity", "statistical_rigor", "reproducibility"]
    },
    "result_generation": {
        "description": "Analysis results and scientific outputs",
        "examples": ["publication-ready reports", "visualization generation", "validation summaries"],
        "validation_criteria": ["scientific_accuracy", "presentation_quality", "reproducibility"]
    }
}
```

## 🧮 **Mathematical Foundations**

### **Ψ(x) Consciousness Quantification Framework**
```python
class PsiFramework:
    """
    Ψ(x) consciousness quantification framework implementation.

    Provides bounded [0,1] probability confidence for consciousness assessment
    with rigorous mathematical foundations.
    """

    def __init__(self, alpha: float = 0.7, lambda1: float = 2.0, lambda2: float = 1.5, beta: float = 1.2):
        """
        Initialize Ψ(x) framework with research-validated parameters.

        Args:
            alpha: Evidence allocation parameter (0.35-0.45 for interpretations)
            lambda1: Authority risk penalty weight
            lambda2: Verifiability risk penalty weight
            beta: Uplift factor for conservative confidence
        """
        self.alpha = alpha
        self.lambda1 = lambda1
        self.lambda2 = lambda2
        self.beta = beta

        # Validate parameter ranges
        self._validate_parameters()

    def _validate_parameters(self):
        """Validate parameter ranges for mathematical consistency."""
        assert 0 < self.alpha < 1, "α must be in (0,1)"
        assert self.lambda1 > 0, "λ₁ must be positive"
        assert self.lambda2 > 0, "λ₂ must be positive"
        assert self.beta >= 1, "β must be ≥ 1 for conservative confidence"

    def calculate_psi(self, evidence_signals: Dict[str, float],
                     risk_factors: Dict[str, float]) -> Dict[str, Any]:
        """
        Calculate Ψ(x) consciousness confidence score.

        Args:
            evidence_signals: Dictionary with 'internal' and 'canonical' evidence
            risk_factors: Dictionary with 'authority' and 'verifiability' risks

        Returns:
            Dictionary containing Ψ(x) score and confidence metrics
        """

        # Extract evidence components
        S = evidence_signals.get('internal', 0.0)      # Internal signals
        N = evidence_signals.get('canonical', 0.0)     # Canonical evidence

        # Extract risk components
        R_a = risk_factors.get('authority', 0.0)       # Authority risk
        R_v = risk_factors.get('verifiability', 0.0)   # Verifiability risk

        # Calculate evidence blend
        O = self.alpha * S + (1 - self.alpha) * N

        # Apply risk penalties (exponential decay)
        risk_penalty = np.exp(-(self.lambda1 * R_a + self.lambda2 * R_v))

        # Calculate Ψ(x) with bounds enforcement
        psi_raw = self.beta * O * risk_penalty
        psi_bounded = min(psi_raw, 1.0)  # Ensure [0,1] bounds

        # Calculate confidence intervals using bootstrap
        psi_confidence = self._calculate_confidence_intervals(psi_bounded, evidence_signals, risk_factors)

        return {
            'psi_score': psi_bounded,
            'confidence_interval': psi_confidence,
            'evidence_components': {'S': S, 'N': N, 'O': O},
            'risk_components': {'R_a': R_a, 'R_v': R_v, 'penalty': risk_penalty},
            'validation_metrics': self._generate_validation_metrics(psi_bounded, evidence_signals, risk_factors)
        }

    def _calculate_confidence_intervals(self, psi_score: float,
                                      evidence_signals: Dict[str, float],
                                      risk_factors: Dict[str, float],
                                      n_bootstrap: int = 1000) -> Tuple[float, float]:
        """
        Calculate confidence intervals using bootstrap resampling.

        This provides statistical uncertainty quantification for Ψ(x) scores.
        """

        # Generate bootstrap samples with uncertainty
        bootstrap_scores = []
        for _ in range(n_bootstrap):
            # Add noise to evidence and risk factors
            noisy_evidence = {
                'internal': evidence_signals['internal'] * (1 + np.random.normal(0, 0.05)),
                'canonical': evidence_signals['canonical'] * (1 + np.random.normal(0, 0.05))
            }

            noisy_risks = {
                'authority': risk_factors['authority'] * (1 + np.random.normal(0, 0.10)),
                'verifiability': risk_factors['verifiability'] * (1 + np.random.normal(0, 0.10))
            }

            # Recalculate Ψ(x) with noise
            bootstrap_result = self.calculate_psi(noisy_evidence, noisy_risks)
            bootstrap_scores.append(bootstrap_result['psi_score'])

        # Calculate confidence intervals
        lower_bound = np.percentile(bootstrap_scores, 2.5)
        upper_bound = np.percentile(bootstrap_scores, 97.5)

        return (lower_bound, upper_bound)

    def _generate_validation_metrics(self, psi_score: float,
                                   evidence_signals: Dict[str, float],
                                   risk_factors: Dict[str, float]) -> Dict[str, Any]:
        """Generate comprehensive validation metrics."""

        # Evidence quality assessment
        evidence_quality = self._assess_evidence_quality(evidence_signals)

        # Risk assessment
        risk_assessment = self._assess_risk_levels(risk_factors)

        # Confidence assessment
        confidence_assessment = self._assess_confidence_level(psi_score, evidence_quality, risk_assessment)

        return {
            'evidence_quality': evidence_quality,
            'risk_assessment': risk_assessment,
            'confidence_assessment': confidence_assessment,
            'overall_validation_score': self._calculate_validation_score(
                evidence_quality, risk_assessment, confidence_assessment
            )
        }

    def _assess_evidence_quality(self, evidence_signals: Dict[str, float]) -> Dict[str, Any]:
        """Assess the quality of evidence signals."""
        S = evidence_signals.get('internal', 0.0)
        N = evidence_signals.get('canonical', 0.0)

        # Calculate evidence strength metrics
        total_evidence = S + N
        evidence_balance = abs(S - N) / max(total_evidence, 1e-10)
        evidence_consistency = 1.0 - evidence_balance

        return {
            'total_strength': total_evidence,
            'balance_ratio': evidence_balance,
            'consistency_score': evidence_consistency,
            'quality_rating': self._get_quality_rating(evidence_consistency)
        }

    def _assess_risk_levels(self, risk_factors: Dict[str, float]) -> Dict[str, Any]:
        """Assess risk levels and their impact."""
        R_a = risk_factors.get('authority', 0.0)
        R_v = risk_factors.get('verifiability', 0.0)

        # Calculate risk metrics
        total_risk = R_a + R_v
        risk_penalty = np.exp(-(self.lambda1 * R_a + self.lambda2 * R_v))

        return {
            'total_risk': total_risk,
            'authority_weight': R_a / max(total_risk, 1e-10),
            'verifiability_weight': R_v / max(total_risk, 1e-10),
            'risk_penalty': risk_penalty,
            'risk_severity': self._get_risk_severity(total_risk)
        }

    def _assess_confidence_level(self, psi_score: float,
                               evidence_quality: Dict[str, Any],
                               risk_assessment: Dict[str, Any]) -> Dict[str, Any]:
        """Assess overall confidence level."""

        # Combine evidence and risk factors
        evidence_factor = evidence_quality['consistency_score']
        risk_factor = 1.0 - risk_assessment['total_risk']

        # Calculate confidence metrics
        confidence_score = psi_score * evidence_factor * risk_factor

        return {
            'confidence_score': confidence_score,
            'evidence_contribution': evidence_factor,
            'risk_contribution': risk_factor,
            'confidence_rating': self._get_confidence_rating(confidence_score)
        }

    def _calculate_validation_score(self, evidence_quality: Dict[str, Any],
                                  risk_assessment: Dict[str, Any],
                                  confidence_assessment: Dict[str, Any]) -> float:
        """Calculate overall validation score."""

        # Weighted combination of validation factors
        weights = {
            'evidence_quality': 0.4,
            'risk_assessment': 0.3,
            'confidence_assessment': 0.3
        }

        evidence_score = evidence_quality['consistency_score']
        risk_score = 1.0 - risk_assessment['total_risk']
        confidence_score = confidence_assessment['confidence_score']

        validation_score = (
            weights['evidence_quality'] * evidence_score +
            weights['risk_assessment'] * risk_score +
            weights['confidence_assessment'] * confidence_score
        )

        return min(max(validation_score, 0.0), 1.0)  # Ensure [0,1] bounds

    # Helper methods for rating calculations
    def _get_quality_rating(self, consistency_score: float) -> str:
        if consistency_score >= 0.9: return "excellent"
        elif consistency_score >= 0.8: return "very_good"
        elif consistency_score >= 0.7: return "good"
        elif consistency_score >= 0.6: return "acceptable"
        else: return "poor"

    def _get_risk_severity(self, total_risk: float) -> str:
        if total_risk >= 1.5: return "critical"
        elif total_risk >= 1.0: return "high"
        elif total_risk >= 0.5: return "medium"
        elif total_risk >= 0.2: return "low"
        else: return "minimal"

    def _get_confidence_rating(self, confidence_score: float) -> str:
        if confidence_score >= 0.9: return "very_high"
        elif confidence_score >= 0.8: return "high"
        elif confidence_score >= 0.7: return "moderate"
        elif confidence_score >= 0.6: return "low"
        else: return "very_low"
```

### **Herschel-Bulkley Rheology Framework**
```python
class HerschelBulkleyFramework:
    """
    Herschel-Bulkley fluid rheology framework.

    Implements non-Newtonian fluid constitutive modeling with
    yield stress and power-law behavior.
    """

    def __init__(self):
        self.convergence_threshold = 0.9987
        self.parameter_bounds = {
            'tau_y': (0, 100),      # Yield stress (Pa)
            'K': (0.1, 1000),       # Consistency index (Pa·s^n)
            'n': (0.1, 1.5)         # Flow behavior index
        }

    def constitutive_model(self, shear_rate: np.ndarray,
                          parameters: Dict[str, float]) -> np.ndarray:
        """
        Herschel-Bulkley constitutive equation.

        τ = τ_y + K * γ̇^n

        Args:
            shear_rate: Array of shear rates (1/s)
            parameters: Dictionary with 'tau_y', 'K', 'n'

        Returns:
            Array of shear stresses (Pa)
        """
        tau_y = parameters['tau_y']
        K = parameters['K']
        n = parameters['n']

        # Handle zero shear rate (infinite viscosity at yield)
        with np.errstate(divide='ignore', invalid='ignore'):
            viscosity = np.where(
                shear_rate == 0,
                np.inf,
                tau_y / shear_rate + K * shear_rate**(n-1)
            )

        # Calculate shear stress
        shear_stress = viscosity * shear_rate

        return shear_stress

    def inverse_parameter_estimation(self, experimental_data: Dict[str, np.ndarray],
                                   optimization_method: str = 'levenberg_marquardt') -> Dict[str, Any]:
        """
        Estimate HB parameters from experimental data.

        Args:
            experimental_data: Dictionary with 'shear_rate' and 'shear_stress' arrays
            optimization_method: Optimization algorithm to use

        Returns:
            Dictionary with estimated parameters and validation metrics
        """

        shear_rate = experimental_data['shear_rate']
        measured_stress = experimental_data['shear_stress']

        # Define objective function
        def objective_function(params):
            tau_y, K, n = params
            predicted_stress = self.constitutive_model(
                shear_rate,
                {'tau_y': tau_y, 'K': K, 'n': n}
            )
            return predicted_stress - measured_stress

        # Initial parameter estimates
        initial_guess = [10.0, 100.0, 0.8]  # [tau_y, K, n]

        # Perform optimization
        if optimization_method == 'levenberg_marquardt':
            result = self._levenberg_marquardt_optimization(objective_function, initial_guess)
        elif optimization_method == 'trust_region':
            result = self._trust_region_optimization(objective_function, initial_guess)
        else:
            raise ValueError(f"Unsupported optimization method: {optimization_method}")

        # Extract results
        estimated_params = {
            'tau_y': result.x[0],
            'K': result.x[1],
            'n': result.x[2]
        }

        # Calculate validation metrics
        validation_metrics = self._calculate_validation_metrics(
            shear_rate, measured_stress, estimated_params
        )

        return {
            'estimated_parameters': estimated_params,
            'optimization_result': result,
            'validation_metrics': validation_metrics,
            'convergence_achieved': self._check_convergence(result)
        }

    def _levenberg_marquardt_optimization(self, objective_function, initial_guess):
        """Perform Levenberg-Marquardt optimization."""
        from scipy.optimize import least_squares

        bounds = list(zip(*[self.parameter_bounds[param] for param in ['tau_y', 'K', 'n']]))

        result = least_squares(
            objective_function,
            initial_guess,
            bounds=bounds,
            method='lm',
            ftol=self.convergence_threshold,
            xtol=self.convergence_threshold,
            max_nfev=1000
        )

        return result

    def _trust_region_optimization(self, objective_function, initial_guess):
        """Perform trust region optimization."""
        from scipy.optimize import minimize

        bounds = [(self.parameter_bounds['tau_y'][0], self.parameter_bounds['tau_y'][1]),
                 (self.parameter_bounds['K'][0], self.parameter_bounds['K'][1]),
                 (self.parameter_bounds['n'][0], self.parameter_bounds['n'][1])]

        result = minimize(
            lambda x: np.sum(objective_function(x)**2),
            initial_guess,
            method='trust-constr',
            bounds=bounds,
            options={
                'xtol': self.convergence_threshold,
                'gtol': self.convergence_threshold,
                'maxiter': 1000
            }
        )

        # Convert minimize result to least_squares format
        class MockResult:
            def __init__(self, x, fun, nfev, success):
                self.x = x
                self.fun = fun
                self.nfev = nfev
                self.success = success

        return MockResult(result.x, objective_function(result.x), result.nfev, result.success)

    def _calculate_validation_metrics(self, shear_rate: np.ndarray,
                                    measured_stress: np.ndarray,
                                    estimated_params: Dict[str, float]) -> Dict[str, Any]:
        """Calculate comprehensive validation metrics."""

        predicted_stress = self.constitutive_model(shear_rate, estimated_params)

        # R-squared
        ss_res = np.sum((measured_stress - predicted_stress)**2)
        ss_tot = np.sum((measured_stress - np.mean(measured_stress))**2)
        r_squared = 1 - (ss_res / ss_tot)

        # Root mean square error
        rmse = np.sqrt(np.mean((measured_stress - predicted_stress)**2))

        # Mean absolute error
        mae = np.mean(np.abs(measured_stress - predicted_stress))

        # Parameter uncertainty estimation
        parameter_uncertainty = self._estimate_parameter_uncertainty(
            shear_rate, measured_stress, estimated_params
        )

        return {
            'r_squared': r_squared,
            'rmse': rmse,
            'mae': mae,
            'parameter_uncertainty': parameter_uncertainty,
            'goodness_of_fit': self._assess_goodness_of_fit(r_squared, rmse, mae)
        }

    def _estimate_parameter_uncertainty(self, shear_rate: np.ndarray,
                                      measured_stress: np.ndarray,
                                      estimated_params: Dict[str, float]) -> Dict[str, Tuple[float, float]]:
        """Estimate parameter uncertainty using bootstrap."""

        n_bootstrap = 1000
        bootstrap_params = []

        for _ in range(n_bootstrap):
            # Bootstrap resampling
            indices = np.random.choice(len(shear_rate), size=len(shear_rate), replace=True)
            bootstrap_shear_rate = shear_rate[indices]
            bootstrap_stress = measured_stress[indices]

            # Re-estimate parameters
            bootstrap_data = {
                'shear_rate': bootstrap_shear_rate,
                'shear_stress': bootstrap_stress
            }

            try:
                bootstrap_result = self.inverse_parameter_estimation(
                    bootstrap_data, optimization_method='levenberg_marquardt'
                )
                bootstrap_params.append([
                    bootstrap_result['estimated_parameters']['tau_y'],
                    bootstrap_result['estimated_parameters']['K'],
                    bootstrap_result['estimated_parameters']['n']
                ])
            except:
                continue

        # Calculate confidence intervals
        bootstrap_array = np.array(bootstrap_params)
        confidence_intervals = {}

        for i, param_name in enumerate(['tau_y', 'K', 'n']):
            if len(bootstrap_array) > 0:
                lower_bound = np.percentile(bootstrap_array[:, i], 2.5)
                upper_bound = np.percentile(bootstrap_array[:, i], 97.5)
                confidence_intervals[param_name] = (lower_bound, upper_bound)
            else:
                confidence_intervals[param_name] = (estimated_params[param_name], estimated_params[param_name])

        return confidence_intervals

    def _assess_goodness_of_fit(self, r_squared: float, rmse: float, mae: float) -> str:
        """Assess overall goodness of fit."""

        if r_squared >= 0.99 and rmse < 1.0 and mae < 0.8:
            return "excellent"
        elif r_squared >= 0.95 and rmse < 5.0 and mae < 4.0:
            return "very_good"
        elif r_squared >= 0.90 and rmse < 10.0 and mae < 8.0:
            return "good"
        elif r_squared >= 0.80 and rmse < 20.0 and mae < 15.0:
            return "acceptable"
        else:
            return "poor"

    def _check_convergence(self, result) -> bool:
        """Check if optimization converged to required precision."""

        if hasattr(result, 'success'):
            return result.success

        # Check parameter convergence
        if hasattr(result, 'x'):
            # Simple convergence check based on function values
            if hasattr(result, 'fun'):
                # For least_squares result
                residual_norm = np.linalg.norm(result.fun)
                return residual_norm < (1 - self.convergence_threshold)
            else:
                # For minimize result
                return result.success

        return False
```

### **Inverse Precision Framework**
```python
class InversePrecisionFramework:
    """
    Inverse precision framework for ill-conditioned parameter estimation.

    Achieves 0.9987 convergence criterion for complex inverse problems
    across scientific domains.
    """

    def __init__(self, convergence_threshold: float = 0.9987):
        self.convergence_threshold = convergence_threshold
        self.optimization_methods = {
            'levenberg_marquardt': self._levenberg_marquardt,
            'trust_region': self._trust_region,
            'differential_evolution': self._differential_evolution,
            'basin_hopping': self._basin_hopping
        }

    def inverse_extract_parameters(self, measured_data: Dict[str, Any],
                                forward_model: Callable,
                                initial_guess: np.ndarray,
                                parameter_bounds: List[Tuple[float, float]] = None,
                                optimization_method: str = 'auto') -> Dict[str, Any]:
        """
        Extract parameters from measured data using inverse precision methods.

        Args:
            measured_data: Dictionary containing experimental measurements
            forward_model: Function that computes predicted data from parameters
            initial_guess: Initial parameter estimates
            parameter_bounds: Parameter bounds for constrained optimization
            optimization_method: Optimization method ('auto' for intelligent selection)

        Returns:
            Dictionary with extracted parameters and validation metrics
        """

        # Select optimization method
        if optimization_method == 'auto':
            optimization_method = self._select_optimal_method(measured_data, initial_guess)

        if optimization_method not in self.optimization_methods:
            raise ValueError(f"Unsupported optimization method: {optimization_method}")

        # Define objective function
        def objective_function(params):
            predicted_data = forward_model(params)
            return self._calculate_residuals(measured_data, predicted_data)

        # Perform optimization
        optimizer = self.optimization_methods[optimization_method]
        result = optimizer(objective_function, initial_guess, parameter_bounds)

        # Extract results
        extracted_params = result['parameters']
        convergence_info = result['convergence_info']

        # Validate convergence
        convergence_achieved = self._validate_convergence(convergence_info)

        # Calculate precision metrics
        precision_metrics = self._calculate_precision_metrics(
            measured_data, forward_model, extracted_params
        )

        return {
            'extracted_parameters': extracted_params,
            'optimization_method': optimization_method,
            'convergence_achieved': convergence_achieved,
            'final_precision': precision_metrics['precision'],
            'precision_metrics': precision_metrics,
            'convergence_info': convergence_info
        }

    def _select_optimal_method(self, measured_data: Dict[str, Any],
                             initial_guess: np.ndarray) -> str:
        """Select optimal optimization method based on problem characteristics."""

        # Analyze problem characteristics
        n_parameters = len(initial_guess)
        data_size = len(list(measured_data.values())[0]) if measured_data else 0

        # Simple heuristic-based selection
        if n_parameters <= 5 and data_size <= 1000:
            return 'levenberg_marquardt'  # Fast and reliable for small problems
        elif n_parameters <= 10:
            return 'trust_region'  # Good for constrained medium-sized problems
        elif n_parameters <= 20:
            return 'differential_evolution'  # Robust for multimodal problems
        else:
            return 'basin_hopping'  # Best for high-dimensional problems

    def _calculate_residuals(self, measured_data: Dict[str, Any],
                           predicted_data: Dict[str, Any]) -> np.ndarray:
        """Calculate residuals between measured and predicted data."""

        residuals = []
        for key in measured_data.keys():
            if key in predicted_data:
                measured_values = np.array(measured_data[key])
                predicted_values = np.array(predicted_data[key])
                residuals.extend(measured_values - predicted_values)

        return np.array(residuals)

    def _levenberg_marquardt(self, objective_function, initial_guess, bounds):
        """Levenberg-Marquardt optimization implementation."""
        from scipy.optimize import least_squares

        result = least_squares(
            objective_function,
            initial_guess,
            bounds=bounds if bounds else (-np.inf, np.inf),
            method='lm',
            ftol=self.convergence_threshold,
            xtol=self.convergence_threshold,
            max_nfev=1000
        )

        return {
            'parameters': result.x,
            'convergence_info': {
                'success': result.success,
                'nfev': result.nfev,
                'message': result.message if hasattr(result, 'message') else 'LM optimization completed'
            }
        }

    def _trust_region(self, objective_function, initial_guess, bounds):
        """Trust region optimization implementation."""
        from scipy.optimize import minimize

        result = minimize(
            lambda x: np.sum(objective_function(x)**2),
            initial_guess,
            method='trust-constr',
            bounds=bounds,
            options={
                'xtol': self.convergence_threshold,
                'gtol': self.convergence_threshold,
                'maxiter': 1000
            }
        )

        return {
            'parameters': result.x,
            'convergence_info': {
                'success': result.success,
                'nfev': result.nfev,
                'message': result.message
            }
        }

    def _differential_evolution(self, objective_function, initial_guess, bounds):
        """Differential evolution optimization implementation."""
        from scipy.optimize import differential_evolution

        if bounds is None:
            # Create default bounds if not provided
            bounds = [(-10, 10) for _ in initial_guess]

        result = differential_evolution(
            lambda x: np.sum(objective_function(x)**2),
            bounds,
            strategy='best1bin',
            maxiter=1000,
            popsize=15,
            tol=self.convergence_threshold,
            seed=42
        )

        return {
            'parameters': result.x,
            'convergence_info': {
                'success': result.success,
                'nfev': result.nfev,
                'message': result.message
            }
        }

    def _basin_hopping(self, objective_function, initial_guess, bounds):
        """Basin hopping optimization implementation."""
        from scipy.optimize import basinhopping

        # Setup minimizer kwargs
        minimizer_kwargs = {
            'method': 'L-BFGS-B',
            'bounds': bounds
        }

        result = basinhopping(
            lambda x: np.sum(objective_function(x)**2),
            initial_guess,
            minimizer_kwargs=minimizer_kwargs,
            niter=100,
            T=1.0,
            stepsize=0.5,
            seed=42
        )

        return {
            'parameters': result.x,
            'convergence_info': {
                'success': True,  # Basin hopping doesn't have success flag
                'nfev': result.nfev,
                'message': 'Basin hopping optimization completed'
            }
        }

    def _validate_convergence(self, convergence_info: Dict[str, Any]) -> bool:
        """Validate that optimization converged to required precision."""

        # Check success flag
        if not convergence_info.get('success', False):
            return False

        # Additional convergence checks can be added here
        # For example, checking if the final function value is below a threshold

        return True

    def _calculate_precision_metrics(self, measured_data: Dict[str, Any],
                                   forward_model: Callable,
                                   extracted_params: np.ndarray) -> Dict[str, Any]:
        """Calculate precision metrics for parameter extraction."""

        # Generate predictions with extracted parameters
        predicted_data = forward_model(extracted_params)

        # Calculate precision metrics
        precision_score = self._calculate_precision_score(measured_data, predicted_data)

        # Calculate error metrics
        error_metrics = self._calculate_error_metrics(measured_data, predicted_data)

        # Calculate confidence intervals
        confidence_intervals = self._calculate_parameter_confidence(
            measured_data, forward_model, extracted_params
        )

        return {
            'precision': precision_score,
            'error_metrics': error_metrics,
            'confidence_intervals': confidence_intervals,
            'target_achieved': precision_score >= self.convergence_threshold
        }

    def _calculate_precision_score(self, measured_data: Dict[str, Any],
                                 predicted_data: Dict[str, Any]) -> float:
        """Calculate overall precision score."""

        total_residuals = []
        total_measured = []

        for key in measured_data.keys():
            if key in predicted_data:
                measured_values = np.array(measured_data[key])
                predicted_values = np.array(predicted_data[key])

                residuals = measured_values - predicted_values
                total_residuals.extend(residuals)
                total_measured.extend(measured_values)

        # Calculate relative precision
        if total_measured:
            relative_error = np.linalg.norm(total_residuals) / np.linalg.norm(total_measured)
            precision = max(0, 1 - relative_error)
        else:
            precision = 0.0

        return precision

    def _calculate_error_metrics(self, measured_data: Dict[str, Any],
                               predicted_data: Dict[str, Any]) -> Dict[str, float]:
        """Calculate comprehensive error metrics."""

        total_residuals = []

        for key in measured_data.keys():
            if key in predicted_data:
                measured_values = np.array(measured_data[key])
                predicted_values = np.array(predicted_data[key])
                residuals = measured_values - predicted_values
                total_residuals.extend(residuals)

        residuals_array = np.array(total_residuals)

        return {
            'rmse': np.sqrt(np.mean(residuals_array**2)),
            'mae': np.mean(np.abs(residuals_array)),
            'max_error': np.max(np.abs(residuals_array)),
            'residual_norm': np.linalg.norm(residuals_array)
        }

    def _calculate_parameter_confidence(self, measured_data: Dict[str, Any],
                                      forward_model: Callable,
                                      extracted_params: np.ndarray,
                                      n_bootstrap: int = 1000) -> Dict[str, Tuple[float, float]]:
        """Calculate parameter confidence intervals using bootstrap."""

        bootstrap_params = []

        for _ in range(n_bootstrap):
            # Bootstrap resampling of measured data
            bootstrapped_data = self._bootstrap_data(measured_data)

            # Re-estimate parameters with bootstrapped data
            try:
                bootstrap_result = self.inverse_extract_parameters(
                    bootstrapped_data, forward_model, extracted_params,
                    optimization_method='levenberg_marquardt'
                )
                bootstrap_params.append(bootstrap_result['extracted_parameters'])
            except:
                continue

        # Calculate confidence intervals
        if bootstrap_params:
            bootstrap_array = np.array(bootstrap_params)
            confidence_intervals = {}

            for i in range(len(extracted_params)):
                lower_bound = np.percentile(bootstrap_array[:, i], 2.5)
                upper_bound = np.percentile(bootstrap_array[:, i], 97.5)
                confidence_intervals[f'param_{i}'] = (lower_bound, upper_bound)
        else:
            # Fallback to point estimates
            confidence_intervals = {
                f'param_{i}': (param, param) for i, param in enumerate(extracted_params)
            }

        return confidence_intervals

    def _bootstrap_data(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Generate bootstrap sample of measured data."""

        # Find the length of data arrays
        data_lengths = [len(values) for values in data.values() if isinstance(values, (list, np.ndarray))]
        if not data_lengths:
            return data

        n_samples = min(data_lengths)  # Use minimum length for consistency

        # Generate bootstrap indices
        bootstrap_indices = np.random.choice(n_samples, size=n_samples, replace=True)

        # Apply bootstrap sampling to all data arrays
        bootstrapped_data = {}
        for key, values in data.items():
            if isinstance(values, (list, np.ndarray)) and len(values) == n_samples:
                values_array = np.array(values)
                bootstrapped_data[key] = values_array[bootstrap_indices].tolist()
            else:
                bootstrapped_data[key] = values

        return bootstrapped_data
```

## 🚀 **Algorithm Selection Framework**

### **Optimization Algorithm Matrix**
```python
OPTIMIZATION_ALGORITHMS = {
    "levenberg_marquardt": {
        "best_for": ["smooth_nonlinear_least_squares", "small_to_medium_problems"],
        "performance": "fast_convergence",
        "reliability": "high",
        "memory_usage": "low",
        "typical_use": "parameter_estimation_rheology"
    },
    "trust_region": {
        "best_for": ["constrained_optimization", "nonlinear_constraints"],
        "performance": "robust_convergence",
        "reliability": "very_high",
        "memory_usage": "medium",
        "typical_use": "inverse_problems_complex_constraints"
    },
    "differential_evolution": {
        "best_for": ["multimodal_problems", "global_optimization"],
        "performance": "good_for_difficult_problems",
        "reliability": "high",
        "memory_usage": "medium",
        "typical_use": "complex_parameter_landscapes"
    },
    "basin_hopping": {
        "best_for": ["high_dimensional_problems", "stochastic_escape"],
        "performance": "good_for_escaping_local_minima",
        "reliability": "good",
        "memory_usage": "medium",
        "typical_use": "high_dimensional_optimization"
    }
}
```

### **Intelligent Algorithm Selection**
```python
def select_optimization_algorithm(problem_characteristics: Dict[str, Any]) -> str:
    """
    Select optimal optimization algorithm based on problem characteristics.

    Args:
        problem_characteristics: Dictionary describing the optimization problem

    Returns:
        Recommended algorithm name
    """

    # Extract problem characteristics
    n_parameters = problem_characteristics.get('n_parameters', 10)
    n_data_points = problem_characteristics.get('n_data_points', 1000)
    is_constrained = problem_characteristics.get('is_constrained', False)
    is_smooth = problem_characteristics.get('is_smooth', True)
    is_multimodal = problem_characteristics.get('is_multimodal', False)
    computational_budget = problem_characteristics.get('computational_budget', 'standard')

    # Algorithm selection logic
    if n_parameters <= 5 and n_data_points <= 1000 and is_smooth and not is_multimodal:
        # Small, smooth problem - Levenberg-Marquardt is optimal
        return "levenberg_marquardt"

    elif is_constrained or not is_smooth:
        # Constrained or non-smooth - Trust Region methods
        return "trust_region"

    elif is_multimodal or n_parameters > 20:
        # Multimodal or high-dimensional - Global optimization
        if computational_budget == 'high':
            return "basin_hopping"
        else:
            return "differential_evolution"

    else:
        # Default fallback
        return "levenberg_marquardt"
```

## 📊 **Performance Benchmarking Framework**

### **Algorithm Performance Metrics**
```python
class AlgorithmBenchmarker:
    """Comprehensive benchmarking framework for optimization algorithms."""

    def __init__(self):
        self.test_problems = self._load_test_problems()
        self.performance_metrics = {}

    def benchmark_algorithm(self, algorithm_name: str,
                          problem_name: str = None,
                          n_runs: int = 10) -> Dict[str, Any]:
        """
        Benchmark optimization algorithm performance.

        Args:
            algorithm_name: Name of algorithm to benchmark
            problem_name: Specific problem to test (None for all)
            n_runs: Number of benchmark runs

        Returns:
            Dictionary with comprehensive performance metrics
        """

        if problem_name:
            problems_to_test = [problem_name] if problem_name in self.test_problems else []
        else:
            problems_to_test = list(self.test_problems.keys())

        results = {}

        for problem in problems_to_test:
            problem_results = []

            for run in range(n_runs):
                # Execute algorithm on test problem
                result = self._execute_algorithm_on_problem(algorithm_name, problem)

                # Record performance metrics
                run_metrics = {
                    "run_number": run,
                    "execution_time": result.get("execution_time", 0),
                    "convergence_achieved": result.get("convergence_achieved", False),
                    "final_objective_value": result.get("final_objective_value", float('inf')),
                    "n_function_evaluations": result.get("n_function_evaluations", 0),
                    "n_iterations": result.get("n_iterations", 0)
                }

                problem_results.append(run_metrics)

            # Calculate aggregate metrics
            aggregate_metrics = self._calculate_aggregate_metrics(problem_results)

            results[problem] = {
                "individual_runs": problem_results,
                "aggregate_metrics": aggregate_metrics,
                "algorithm": algorithm_name,
                "problem": problem
            }

        return results

    def _execute_algorithm_on_problem(self, algorithm_name: str, problem_name: str) -> Dict[str, Any]:
        """Execute specific algorithm on specific test problem."""

        # This would implement the actual algorithm execution
        # For now, return mock results
        import time
        import random

        start_time = time.time()

        # Simulate algorithm execution
        time.sleep(random.uniform(0.1, 2.0))

        execution_time = time.time() - start_time

        return {
            "execution_time": execution_time,
            "convergence_achieved": random.random() > 0.2,
            "final_objective_value": random.uniform(0.001, 1.0),
            "n_function_evaluations": random.randint(100, 1000),
            "n_iterations": random.randint(10, 100)
        }

    def _calculate_aggregate_metrics(self, run_results: List[Dict[str, Any]]) -> Dict[str, Any]:
        """Calculate aggregate performance metrics across multiple runs."""

        if not run_results:
            return {}

        # Extract metrics
        execution_times = [r["execution_time"] for r in run_results]
        convergence_rates = [1 if r["convergence_achieved"] else 0 for r in run_results]
        final_objectives = [r["final_objective_value"] for r in run_results]
        nfevs = [r["n_function_evaluations"] for r in run_results]

        return {
            "mean_execution_time": np.mean(execution_times),
            "std_execution_time": np.std(execution_times),
            "min_execution_time": np.min(execution_times),
            "max_execution_time": np.max(execution_times),
            "convergence_rate": np.mean(convergence_rates),
            "mean_final_objective": np.mean(final_objectives),
            "std_final_objective": np.std(final_objectives),
            "mean_nfev": np.mean(nfevs),
            "total_runs": len(run_results)
        }

    def _load_test_problems(self) -> Dict[str, Dict[str, Any]]:
        """Load standard test problems for benchmarking."""

        return {
            "rosenbrock": {
                "function": lambda x: (1 - x[0])**2 + 100 * (x[1] - x[0]**2)**2,
                "bounds": [(-2, 2), (-2, 2)],
                "global_minimum": [1.0, 1.0],
                "difficulty": "unconstrained_nonlinear"
            },
            "rastrigin": {
                "function": lambda x: 10 * len(x) + sum(xi**2 - 10 * np.cos(2 * np.pi * xi) for xi in x),
                "bounds": [(-5.12, 5.12)] * 10,
                "global_minimum": [0.0] * 10,
                "difficulty": "multimodal_high_dimensional"
            },
            "constrained_problem": {
                "function": lambda x: (x[0] - 1)**2 + (x[1] - 1)**2,
                "bounds": [(-10, 10), (-10, 10)],
                "constraints": [lambda x: x[0] + x[1] - 1],  # x[0] + x[1] >= 1
                "global_minimum": [0.5, 0.5],
                "difficulty": "constrained_optimization"
            }
        }
```

## 🎯 **Framework Integration Standards**

### **Cross-Framework Data Exchange**
```python
# Standardized data exchange format
FRAMEWORK_DATA_SCHEMA = {
    "metadata": {
        "framework_name": str,
        "version": str,
        "timestamp": str,
        "data_format_version": str
    },
    "parameters": {
        "input_parameters": Dict[str, Any],
        "output_parameters": Dict[str, Any],
        "parameter_bounds": Dict[str, Tuple[float, float]],
        "parameter_uncertainty": Dict[str, Tuple[float, float]]
    },
    "data": {
        "input_data": Dict[str, np.ndarray],
        "output_data": Dict[str, np.ndarray],
        "validation_data": Dict[str, np.ndarray]
    },
    "results": {
        "optimization_results": Dict[str, Any],
        "validation_metrics": Dict[str, Any],
        "performance_metrics": Dict[str, Any],
        "convergence_info": Dict[str, Any]
    },
    "provenance": {
        "algorithm_used": str,
        "framework_version": str,
        "execution_environment": Dict[str, str],
        "random_seed": int
    }
}
```

### **Framework Interoperability Layer**
```python
class FrameworkInteroperabilityLayer:
    """Unified interface for cross-framework integration."""

    def __init__(self):
        self.registered_frameworks = {}
        self.data_transformers = {}

    def register_framework(self, framework_name: str,
                          framework_interface: Any,
                          data_transformer: Callable = None):
        """Register a framework for interoperability."""

        self.registered_frameworks[framework_name] = framework_interface

        if data_transformer:
            self.data_transformers[framework_name] = data_transformer

    def execute_cross_framework_workflow(self, workflow_definition: Dict[str, Any]) -> Dict[str, Any]:
        """
        Execute a workflow that spans multiple frameworks.

        Args:
            workflow_definition: Dictionary defining the cross-framework workflow

        Returns:
            Dictionary with results from all framework executions
        """

        workflow_results = {}

        # Execute workflow steps
        for step_name, step_config in workflow_definition.items():
            framework_name = step_config.get("framework")
            operation = step_config.get("operation")
            parameters = step_config.get("parameters", {})

            if framework_name in self.registered_frameworks:
                framework = self.registered_frameworks[framework_name]

                # Transform data if transformer exists
                if framework_name in self.data_transformers:
                    parameters = self.data_transformers[framework_name](parameters)

                # Execute operation
                result = getattr(framework, operation)(**parameters)
                workflow_results[step_name] = result
            else:
                workflow_results[step_name] = {
                    "error": f"Framework '{framework_name}' not registered"
                }

        return workflow_results

    def validate_framework_compatibility(self, framework1: str, framework2: str) -> bool:
        """Validate compatibility between two frameworks."""

        # Check if both frameworks are registered
        if framework1 not in self.registered_frameworks or framework2 not in self.registered_frameworks:
            return False

        # Check data format compatibility
        f1_interface = self.registered_frameworks[framework1]
        f2_interface = self.registered_frameworks[framework2]

        # This would implement detailed compatibility checking
        return self._check_data_format_compatibility(f1_interface, f2_interface)

    def _check_data_format_compatibility(self, framework1_interface: Any,
                                       framework2_interface: Any) -> bool:
        """Check if two frameworks have compatible data formats."""

        # Implement compatibility checking logic
        # This would verify that output format of framework1
        # is compatible with input format of framework2

        return True  # Placeholder implementation
```

This scientific computing frameworks rule establishes the mathematical foundations, algorithms, and integration standards for research-grade scientific computing across the entire toolkit ecosystem.