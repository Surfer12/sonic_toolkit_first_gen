---
alwaysApply: true
description: "Advanced Scientific Computing Toolkit project structure and navigation guide"
---

# üî¨ Advanced Scientific Computing Toolkit - Project Structure

## Core Architecture Overview

This repository contains a comprehensive scientific computing ecosystem with multiple frameworks, languages, and specialized tools. Understanding the structure is crucial for effective navigation and development.

## üìÅ Primary Directory Structure

### Scientific Computing Frameworks
```
scientific-computing-tools/
‚îú‚îÄ‚îÄ inverse_precision_framework.py     # 0.9987 convergence system
‚îú‚îÄ‚îÄ hbflow/                           # Herschel-Bulkley rheology package
‚îÇ   ‚îú‚îÄ‚îÄ models.py                     # Constitutive equations
‚îÇ   ‚îú‚îÄ‚îÄ fit.py                        # Parameter fitting
‚îÇ   ‚îî‚îÄ‚îÄ validation.py                 # Validation against limits
‚îú‚îÄ‚îÄ eye_color_optical_system.py       # Ophthalmic analysis
‚îî‚îÄ‚îÄ multi_phase_flow_analysis.py      # Advanced flow modeling
```

### Optical & Biometric Systems
```
optical_depth_enhancement.py          # Sub-nanometer precision (3500x enhancement)
integrated_eye_depth_system.py        # 3D iris analysis (85% biometric confidence)
chromostereopsis_model.py             # Visual depth illusion modeling
```

### Security & Cryptography
```
crypto_key_generation.py              # Post-quantum cryptography (256-bit keys)
Corpus/qualia/                        # Java security frameworks
‚îú‚îÄ‚îÄ JavaPenetrationTesting.java       # Penetration testing
‚îú‚îÄ‚îÄ ReverseKoopmanOperator.java       # Advanced security analysis
‚îî‚îÄ‚îÄ SecurityFinding.java             # Security assessment
```

### Process & Biological Systems
```
process_design_framework.py           # Industrial flow simulation
plant_biology_model.py               # Lorenz-based maturation dynamics
biological_flow_system.py            # Vascular network modeling
```

### Development & Testing
```
.github/workflows/                   # CI/CD pipelines
‚îú‚îÄ‚îÄ ci.yml                          # Multi-language testing
‚îú‚îÄ‚îÄ scientific-validation.yml       # Scientific validation
‚îî‚îÄ‚îÄ pages.yml                       # Documentation deployment

performance_showcase.py             # Achievement demonstrations
interactive_showcase.py             # Interactive demos
benchmark_dashboard.py              # Performance monitoring
```

## üèóÔ∏è Framework Entry Points

### Quick Start Guide
1. **Scientific Computing**: Start with [scientific_computing_tools/](mdc:scientific-computing-tools/)
2. **Optical Systems**: Use [optical_depth_enhancement.py](mdc:optical_depth_enhancement.py)
3. **Biometric Analysis**: Access [integrated_eye_depth_system.py](mdc:integrated_eye_depth_system.py)
4. **Security Research**: Explore [Corpus/qualia/](mdc:Corpus/qualia/)
5. **Process Design**: Use [process_design_framework.py](mdc:process_design_framework.py)

### Language-Specific Entry Points
- **Python**: [scientific_computing_tools/](mdc:scientific-computing-tools/) (primary interface)
- **Java**: [Corpus/qualia/](mdc:Corpus/qualia/) (security frameworks)
- **Mojo**: High-performance implementations in framework modules
- **Swift**: iOS frameworks in [Farmer/](mdc:Farmer/) directory

## üîß Key Configuration Files

### Build & Dependencies
- [requirements.txt](mdc:requirements.txt) - Python dependencies
- [pyproject.toml](mdc:pyproject.toml) - Python project configuration
- [Makefile](mdc:Makefile) - Build automation
- [pixi.toml](mdc:pixi.toml) - Environment management

### Development Environment
- [.github/workflows/](mdc:.github/workflows/) - CI/CD pipelines
- [docs/](mdc:docs/) - Documentation and GitHub Pages
- [tests/](mdc:tests/) - Test suites
- [scripts/](mdc:scripts/) - Utility scripts

## üéØ Framework Selection Guide

### For Fluid Dynamics Research
```python
# Use these frameworks:
from scientific_computing_tools.hbflow.models import hb_tau_from_gamma
from multi_phase_flow_analysis import MultiPhaseFlowAnalyzer
```

### For Optical Precision Work
```python
# Use these frameworks:
from optical_depth_enhancement import OpticalDepthAnalyzer
from chromostereopsis_model import ChromostereopsisModel
```

### For Biometric Security
```python
# Use these frameworks:
from integrated_eye_depth_system import IntegratedEyeDepthAnalyzer
from crypto_key_generation import PostQuantumKeyGenerator
```

### For Process Engineering
```python
# Use these frameworks:
from process_design_framework import ProcessDesignFramework
from inverse_precision_framework import InversePrecisionFramework
```

## üìä Performance Benchmarks

### Achievement Targets
- **3500x Depth Enhancement**: Optical precision validation
- **85% Biometric Confidence**: 3D iris recognition accuracy
- **0.9987 Precision Convergence**: Guaranteed convergence criterion
- **256-bit Quantum Security**: Post-quantum cryptographic strength
- **4-Language Support**: Cross-platform compatibility

### Benchmark Commands
```bash
# Run performance showcase
python performance_showcase.py

# Interactive demonstrations
python interactive_showcase.py

# Benchmark dashboard
python benchmark_dashboard.py --iterations 10 --export-results
```

## üöÄ Development Workflows

### Adding New Frameworks
1. Create framework module in appropriate directory
2. Add to [requirements.txt](mdc:requirements.txt) if needed
3. Create tests in [tests/](mdc:tests/)
4. Update documentation in [docs/](mdc:docs/)
5. Add to CI/CD pipeline in [.github/workflows/](mdc:.github/workflows/)

### Framework Integration Pattern
```python
# Standard integration pattern
from scientific_computing_tools.base_framework import BaseFramework

class NewScientificFramework(BaseFramework):
    """New framework following toolkit conventions"""

    def __init__(self, config=None):
        super().__init__(config)
        self.precision_target = 0.9987  # Standard convergence criterion

    def validate_achievement(self):
        """Validate against scientific targets"""
        return self.validate_precision_target()
```

## üîó Cross-Framework Dependencies

### Core Dependencies
- **NumPy**: Numerical computing foundation
- **SciPy**: Scientific computing algorithms
- **Matplotlib**: Visualization and plotting
- **Pandas**: Data manipulation and analysis

### Framework Interconnections
```
Optical Depth ‚Üî Biometric Analysis (3D iris structure)
Inverse Precision ‚Üî All Frameworks (parameter extraction)
Cryptography ‚Üî Biometric (key generation)
Multi-Phase Flow ‚Üî Process Design (industrial applications)
```

## üìö Documentation Structure

### User Documentation
- [docs/achievements-showcase.md](mdc:docs/achievements-showcase.md) - Achievement demonstrations
- [docs/frameworks/](mdc:docs/frameworks/) - Framework-specific guides
- [README.md](mdc:README.md) - Main repository overview

### Developer Documentation
- [.cursor/rules/](mdc:.cursor/rules/) - AI assistant rules
- [docs/api/](mdc:docs/api/) - API reference
- [docs/development/](mdc:docs/development/) - Development guides

## üéØ Quick Reference

### Most Important Files
- [performance_showcase.py](mdc:performance_showcase.py) - Achievement demonstrations
- [inverse_precision_framework.py](mdc:inverse_precision_framework.py) - Core convergence system
- [optical_depth_enhancement.py](mdc:optical_depth_enhancement.py) - Precision optical system
- [integrated_eye_depth_system.py](mdc:integrated_eye_depth_system.py) - Biometric analysis

### Most Important Directories
- [scientific-computing-tools/](mdc:scientific-computing-tools/) - Core frameworks
- [.github/workflows/](mdc:.github/workflows/) - CI/CD pipelines
- [docs/](mdc:docs/) - Documentation
- [Corpus/qualia/](mdc:Corpus/qualia/) - Security frameworks

This structure provides a comprehensive foundation for advanced scientific computing research and development across multiple domains and programming languages.